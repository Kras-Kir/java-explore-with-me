{
	"info": {
		"name": "ewm-comments-service",
		"description": "Тесты для API комментариев",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "categoryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId2",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Comments - Setup",
			"item": [
				{
					"name": "Create user 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"const userData = {",
									"  \"name\": \"Test User \" + timestamp,",
									"  \"email\": \"test\" + timestamp + \"@mail.ru\"",
									"};",
									"pm.request.body.update(JSON.stringify(userData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"userId\", response.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"const userData = {",
									"  \"name\": \"Test User 2 \" + timestamp,",
									"  \"email\": \"test2\" + timestamp + \"@mail.ru\"",
									"};",
									"pm.request.body.update(JSON.stringify(userData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"userId2\", response.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"const categoryData = {",
									"  \"name\": \"Test Category \" + timestamp",
									"};",
									"pm.request.body.update(JSON.stringify(categoryData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"categoryId\", response.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = Date.now();",
									"const futureDate = new Date();",
									"futureDate.setMonth(futureDate.getMonth() + 1);",
									"const year = futureDate.getFullYear();",
									"const month = String(futureDate.getMonth() + 1).padStart(2, '0');",
									"const day = String(futureDate.getDate()).padStart(2, '0');",
									"const eventDate = `${year}-${month}-${day} 20:00:00`;",
									"const eventData = {",
									"  \"annotation\": \"Test event annotation \" + timestamp,",
									"  \"category\": parseInt(pm.collectionVariables.get(\"categoryId\")),",
									"  \"description\": \"Test event description \" + timestamp,",
									"  \"eventDate\": eventDate,",
									"  \"location\": {",
									"    \"lat\": 55.7558,",
									"    \"lon\": 37.6173",
									"  },",
									"  \"paid\": false,",
									"  \"participantLimit\": 0,",
									"  \"requestModeration\": true,",
									"  \"title\": \"Test Event \" + timestamp",
									"};",
									"pm.request.body.update(JSON.stringify(eventData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"eventId\", response.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Moderate event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moderationData = {",
									"  \"stateAction\": \"PUBLISH_EVENT\"",
									"};",
									"pm.request.body.update(JSON.stringify(moderationData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/events/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								"{{eventId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments - Private API",
			"item": [
				{
					"name": "Create comment - valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const commentData = {",
									"  \"text\": \"Test comment \" + Date.now()",
									"};",
									"pm.request.body.update(JSON.stringify(commentData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"commentId\", response.id);",
									"pm.test(\"Response has correct structure\", function () {",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('text');",
									"    pm.expect(response).to.have.property('eventId');",
									"    pm.expect(response).to.have.property('authorId');",
									"    pm.expect(response).to.have.property('status').that.equals('PENDING');",
									"    pm.expect(response).to.have.property('createdOn');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments?eventId={{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - duplicate (conflict)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const commentData = {",
									"  \"text\": \"Duplicate comment \" + Date.now()",
									"};",
									"pm.request.body.update(JSON.stringify(commentData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments?eventId={{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment - empty text",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const commentData = {",
									"  \"text\": \"\"",
									"};",
									"pm.request.body.update(JSON.stringify(commentData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId2}}/comments?eventId={{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId2}}",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.test(\"Response contains comments array\", function () {",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('text');",
									"        pm.expect(response[0]).to.have.property('status');",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const commentData = {",
									"  \"text\": \"Updated comment \" + Date.now()",
									"};",
									"pm.request.body.update(JSON.stringify(commentData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.test(\"Comment updated\", function () {",
									"    pm.expect(response.text).to.include('Updated comment');",
									"    pm.expect(response.status).to.equal('PENDING');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments - Public API",
			"item": [
				{
					"name": "Create comment for public test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const commentData = {",
									"  \"text\": \"Public test comment \" + Date.now()",
									"};",
									"pm.request.body.update(JSON.stringify(commentData));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const response = pm.response.json();",
									"pm.collectionVariables.set(\"commentId\", response.id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments?eventId={{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Moderate comment - approve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.test(\"Comment approved\", function () {",
									"    pm.expect(response.status).to.equal('APPROVED');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{commentId}}?status=APPROVED",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "status",
									"value": "APPROVED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get published event comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.test(\"Response contains approved comments\", function () {",
									"    pm.expect(response).to.be.an('array');",
									"    if (response.length > 0) {",
									"        pm.expect(response[0]).to.have.property('id');",
									"        pm.expect(response[0]).to.have.property('text');",
									"        pm.expect(response[0]).to.have.property('authorName');",
									"        pm.expect(response[0]).to.have.property('createdOn');",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/events/{{eventId}}?from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"events",
								"{{eventId}}"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific published comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.test(\"Response structure is correct\", function () {",
									"    pm.expect(response).to.have.property('id').that.equals(parseInt(pm.collectionVariables.get('commentId')));",
									"    pm.expect(response).to.have.property('status').that.equals('APPROVED');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments - Admin API",
			"item": [
				{
					"name": "Search comments with filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"pm.test(\"Response contains comments array\", function () {",
									"    pm.expect(response).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?users={{userId}}&events={{eventId}}&status=APPROVED&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "users",
									"value": "{{userId}}"
								},
								{
									"key": "events",
									"value": "{{eventId}}"
								},
								{
									"key": "status",
									"value": "APPROVED"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}